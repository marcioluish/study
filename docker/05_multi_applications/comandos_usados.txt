** Backend NodeJS
[app.js]
`mongodb://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@mongo:27017/course-goals?authSource=admin`

[package.json]
"devDependencies": {
  "nodemon": "^2.0.4"
}

## Abaixo a flag -L é usada para atualização em tempo real das mudanças feitas localmente
# em sistemas Windows + WSL2 + Docker
"scripts": {
  "start": "nodemon - L app.js"
}

[Dockerfile]
CMD ["node", "app.js"] --> CMD ["npm", "start"]

[Docker]
docker run --rm -p 80:80 --name multi-backend --network multi-net -v logs:/app/logs --env-file ./backend/.env -v /app/node_modules -v "C:/Projects/udemy/docker/05_multi_applications/multi-01-starting-setup/backend:/app" multi:backend
# A porta 80:80 é publicada exclusivamente para que o front consiga se comunicar com o back.
# O comando, utilizando proxy no React, exclui a publicação da porta:
docker run --rm --name multi-backend --network multi-net -v logs:/app/logs --env-file ./backend/.env -v /app/node_modules -v "C:/Projects/udemy/docker/05_multi_applications/multi-01-starting-setup/backend:/app" multi:backend

** Frontend ReactJS
[docker]
# A opção '-it' é necessária pois a aplicação atual trabalha com inputs do usuário.
# Não faz sentido colocar '--network' aqui. Ver explicação em ./frontend/src/app.js
## -e CHOKIDAR_USEPOLLING=true é usado para atualização em tempo real das mudanças feitas localmente
# em sistemas Windows + WSL2 + Docker
docker run --rm -p 3000:3000 -it --name multi-frontend --net multi-net -e CHOKIDAR_USEPOLLING=true -v "C:/Projects/udemy/docker/05_multi_applications/multi-01-starting-setup/frontend/src:/app/src" multi:frontend

## Caso o proxy seja usado em ./frontend/package.json e referenciado nas chamadas
# em ./frontend/src/app.js, deve ser usado '--network'.
docker run --rm -p 3000:3000 -it --net multi-net --name multi-frontend multi:frontend

** DB Mongo
[Docker]
docker run -d --rm --name multi-mongo --network multi-net -v goals:/data/db -e MONGO_INITDB_ROOT_USERNAME=marcio -e MONGO_INITDB_ROOT_PASSWORD=f5a2x6g5 mongo:5.0.0

** Network
docker network create multi-net